-- AI template

function construct(stats)
	a_max,v_max,E_mul, stat_mul,split_cost_mul = stats[1], stats[2], stats[3], stats[4], stats[5]
	
	return nil
end

function update(self, other)
	split=false
	r, E, v, f = self[1], self[2], self[3], self[4]
	
	-- other[i][] contains data about the i-th nerby AI, other[i][1] is its radius, other[i][2] is 1 if its the same species and 1 if its not, other[i][3] is its relative distance and other[i][4] is its direction from you
	
	
	-- set split to true if want to split, otherwise set v_t to target speed, f_t to target facing; always return split
	
	local mindist,minfr = 10000, 10000
	local frid, friendlyfire=-1,false
	local l = #other
	v_t = 0
	f_t = 180
	for i=1,l do
		if other[i][3]-other[i][1] < mindist and other[i][2]==0 then
			if other[i][1] < r then
				mindist,f_t,v_t = other[i][3]-other[i][1],other[i][4]+180, math.max(1.0-other[i][3]/20, 0.3)
			else
				mindist,f_t,v_t = other[i][3]-other[i][1],other[i][4], math.max(1.0-other[i][3]/20, 0.3)
			end
		end
	end
	for i=1,l do
		if other[i][3]-other[i][1]<minfr and other[i][2]==1 then
			frid, minfr = i,(other[i][3]-other[i][1])
		end
	end
	if frid~=-1 then
		if (mindist-minfr<3) then
			friendlyfire=true
			v_t, f_t=1, other[frid][4]+180
		end
	end
	if r>4 and ((friendlyfire==false and math.random() < 0.2) or math.random()<0.01) then
		split = true
	end
	return split
end

function getEvolve()
	--calculate values for evolve: d_a_max, d_v_max, d_E_mul, d_stat_mul, d_split_cost_mul, sum must not exceed stat_mul or will be normalised
	d_a_max,d_v_max,d_E_mul,d_stat_mul,d_split_cost_mul = stat_mul/5,stat_mul*2/5,stat_mul/10,stat_mul/5,stat_mul/10
end